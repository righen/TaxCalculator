// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaxCalculator.Infrastructure.Persistence;

#nullable disable

namespace TaxCalculator.Infrastructure.Migrations
{
    [DbContext(typeof(TaxCalculatorDbContext))]
    [Migration("20230511124912_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("TaxCalculator.Domain.Entities.TaxBracket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LowerBound")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UpperBound")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TaxBrackets", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LowerBound = 0m,
                            Rate = 0.10m,
                            UpperBound = 8350m
                        },
                        new
                        {
                            Id = 2,
                            LowerBound = 8351m,
                            Rate = 0.15m,
                            UpperBound = 33950m
                        },
                        new
                        {
                            Id = 3,
                            LowerBound = 33951m,
                            Rate = 0.25m,
                            UpperBound = 82250m
                        },
                        new
                        {
                            Id = 4,
                            LowerBound = 82251m,
                            Rate = 0.28m,
                            UpperBound = 171550m
                        },
                        new
                        {
                            Id = 5,
                            LowerBound = 171551m,
                            Rate = 0.33m,
                            UpperBound = 372950m
                        },
                        new
                        {
                            Id = 6,
                            LowerBound = 372951m,
                            Rate = 0.35m,
                            UpperBound = 79228162514264337593543950335m
                        });
                });

            modelBuilder.Entity("TaxCalculator.Domain.Entities.TaxCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AnnualIncome")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CalculationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TaxCalculations");
                });

            modelBuilder.Entity("TaxCalculator.Domain.PostalCodeTaxCalculator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CalculatorType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PostalCodeTaxCalculators", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalculatorType = "Progressive",
                            PostalCode = "7441"
                        },
                        new
                        {
                            Id = 2,
                            CalculatorType = "FlatValue",
                            PostalCode = "A100"
                        },
                        new
                        {
                            Id = 3,
                            CalculatorType = "FlatRate",
                            PostalCode = "7000"
                        },
                        new
                        {
                            Id = 4,
                            CalculatorType = "Progressive",
                            PostalCode = "1000"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
